generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OnboardingStep {
  STEP_ONE
  STEP_TWO
  STEP_THREE
  COMPLETED
}

model User {
  id             String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email          String          @unique
  name           String?
  birthdate      DateTime?       @db.Date
  password       String?
  isThirdParty   Boolean         @default(false)
  validation     UserValidation?
  groups         UserGroups[]
  onboardingStep OnboardingStep?
  mailRateLimits MailRateLimit[]

  @@map("Users")
}

model UserValidation {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @unique @db.Uuid
  token       String    @db.Uuid
  validatedAt DateTime?

  @@map("UserValidations")
}

model MailRateLimit {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String   @unique @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  attemptMs Int
  createdAt DateTime

  @@map("MailRateLimit")
}

model UserGroups {
  id      String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId  String @db.Uuid
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String @db.Uuid

  @@map("UserGroups")
}

model Group {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code          Int             @unique @default(autoincrement())
  name          String
  users         UserGroups[]
  GroupInterest GroupInterest[]

  @@map("Groups")
}

model GroupInterest {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  groupId    String   @db.Uuid
  group      Group    @relation(fields: [groupId], references: [id])
  Interest   Interest @relation(fields: [interestId], references: [id])
  interestId String   @db.Uuid

  @@map("GroupInterest")
}

model Interest {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  unicode       String
  name          String
  categoryId    String          @db.Uuid
  category      Category        @relation(fields: [categoryId], references: [id])
  groupInterest GroupInterest[]

  @@map("Interest")
}

model Category {
  id        String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  interests Interest[]

  @@map("Category")
}
